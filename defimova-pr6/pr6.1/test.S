.include "my-macro"			# подключение файла с макроопределениями

.bss						# секция общей памяти
	.lcomm c, 1
	.lcomm buf, 100
	
.data						# секция данных, распределение памяти

dec:	 .long 10           
num:	 .long 0			# переменная для полученного произведения

.text						# секция команд процесора

.type Factorial, @function  # функция для вычисления факториала
	
Factorial:

	pushl %ebp				# сохранить в стеке значение, бывшее в вызывающей
	movl %esp, %ebp			# обеспечить адресный доступ к параметрам и 
                            # локальным переменнным в стеке путем базовой 
                            # адресации через ebp
	movl 8(%ebp), %eax      # Стандартный пролог
	cmpl $1, %eax			# Ввели 1?
	je return				# ДА - вернем 1
	decl %eax				# уменьшаем число на 1
	pushl %eax				# сохраняем в стеке значение числа
	call Factorial			# вызов функции
	addl $4, %esp			# очиcтить стек от параметров Factorial
	imull 8(%ebp)			# находим произведение
	jc overflow				# если произошло переполнение, переходим на вывод соответствующего сообщения

return:

	movl %ebp, %esp			# восстановить указатель стека
	popl %ebp				# восстановить ebp
	ret						# возврат в вызывающую


.global _start				# точка входа - глобальная метка

_start:

	nop
	#xor %eax, %eax			# поибтово обнуляем регистр
	mov %eax, %eax          # обнуляем регистр

input:

	pusha					# сохранение регистров главной программы
	Getchar $c				# макровызов ввода символа со стандартного ввода
	popa					# восстановить регистры главной програмы
	cmpl $'\n', c			# это символ перевода строки ?
	je calc					# ДА - на метку calc
	movl dec, %ecx			# помещаем в %ecx значение dec
	imul %ecx				# умножаем на 10, чтобы перейти к следующему разряду
	movb c, %bl				# код из c пишем в bl
	subl $48, %ebx			# преобразовываем код символа цифры в само число
	addl %ebx, %eax			# складываем, чтобы получить введенное число
	jmp input				# переходим на input

calc:
	push %eax				# сохраняем значение регистра в стеке
	call Factorial			# вызов функции
	addl $4, %esp			# очиcтить стек от параметров Factorial
	movl %eax, num			# присваиваем переменной num искомое значение
	Putnum num dec			# макровызов вывода числа в 10 с.с.
	#Puts ""					#
	jmp stop				# на завершение программы

overflow:
	Puts "Overflow!"        # вывод сообщения о переполнении

stop:	
	Exit $0
.end						# последняя строка исходного текста	
	
