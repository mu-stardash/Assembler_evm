/* Программа считывает числа из стандартного ввода и выводит их сумму

    Компиляция и редактирование связей:
    as --32 -gstabs+ -o func-for-c.o func-for-c.S
    gcc -m32 -gstabs+ -o c-as call-as.c func-for-c.o
    вызывающая программа на C в файле call-as.c
    функции на ассемблере в файле main.S
	
    Copyright (c) 2020, Dasha Efimova <dashulya0301178@gmail.com>
 */
	
.include "my-macro"		# подключение файла с макроопределениями

.extern readSym			# импортируем функции на си
.extern printf			# импортируем функции на си
	
.data
summa:	.short 0		        # Переменная для хранения суммы
format:	 .string "Summa: %hd\n" # Переменная для хранения строки, куда записывается целое число типа short со знаком в десятичной системе счисления
	
.type Sum, @function		# функция суммирования двух чисел
.text				        # секция команд процесора

Sum:
	movl 4(%esp), %eax	# Функция short sum(short, short) 1-ый параметр
	movl 8(%esp), %ebx	# 2-ой параметр
	
	add %bx, %ax		# пробуем сложить
	jo overflow	# если произошло знаковое переполнение, переходим на метку
	
	ret			        # возврат в вызывающую

overflow:			    #Обрабатываем знаковое переполнение
	Puts "Overfow!!!\nSum is set to 0" # выводим сообщение о переполнении суммы
	movw $0, %ax		# очищаем регистр
	ret			        # возврат в вызывающую

.global main			# имя, ОПРЕДЕЛЕННОЕ вне этого исходного файла
	
main:
	nop
	
	pusha			# сохранение регистров главной программы
	call readSym    # Вызов функции из модуля на Си

	pushl summa			# Параметр-2 - адрес массива в стек
	pushl %eax		# Параметр-1 в стек
	call Sum		# вызов фунцкии 
	movw %ax, summa		# присваиваем переменной искомое значение	  
	addl $8, %esp 	# очистить стек от параметров Sum

	pushl summa			# Параметр-2 - адрес массива в стек
	pushl $format	# Параметр-1 в стек
	call printf		# вызов функции из модуля Си
	addl $8, %esp	# очистить стек от параметров printf
	
	jmp main		# Повторяем
	
.end




	
