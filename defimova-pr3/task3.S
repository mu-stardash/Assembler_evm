/**
 * Программа ввода кодов цифровых символов в буфер и вывода сообщений в стандартный вывод.
 *
 * Copyright (c) 2020, Dasha Efimova <dashulya0301178@gmail.com>
*/

.include "my-macro"

.bss
    .lcomm buf, 10 # буфер для хранения прочитанных символов. Размер - 10 байт
    .lcomm c, 1	# буфер для чтения текущего символа. Размер - 1 байт
	
.text
.global _start

_start:
    sub	%esi, %esi     # указатель адреса байта в буфере символов (индексный регистр)  
    
show_prompt:
    Puts "Вводите цифру, друг мой!" 	# макровызов вывода строки на стандартный
					# вывод (подсказка ввода)

kbd_input:
    Getchar $c          # макровызов ввода символа со стандартного ввода
    
    cmpl $0, %eax 	# Конец файл - EOF (введено 0 символов) ? 
    je stop		# Да - на завершение программы
    
    cmpb $'\n', c 	# это символ перевода строки ?
    je enter      	# ДА - переводим число, которое было перед символом завершения строки
    cmpb $'9', c  	# код больше кода символа '9' ?
    ja print_err_msg	# ДА - на вывод сообщения об ошибке
    cmpb $'0', c	# код меньше кода символа '0' ?
    jb print_err_msg	# ДА - на вывод сообщения об ошибке

    cmpl $10, %esi     	# в буфере 10 символов?
    je print_err_buf	# ДА - на вывод сообщения о переполнении
	
	movb c, %al         # код из с пишем в al
    movb %al, buf(%esi) # Загрузить содержимое al (введенный символ) в байт по
			# адресу buf + esi (буфер для вводимых символов)
    incl %esi		# указать на следующий адрес буфера для следующего символа

    Puts "Цифра! Хорошо." # вывод сообщения об успешном вводе
    
    jmp show_prompt	# на ввод следующего символа

enter:
	cmpl $0, %esi 	# в буфере пусто?
	je show_prompt	# ДА - на ввод нового символа
	 
	decl %esi	# указать на предыдущий адрес буфера для предыдущего символа 
	subl %eax, %eax	# очищаем регистр
	movb buf(%esi), %al	# байтовое перемещение, из буфера buf + esi забирается код цифрового символа и размещается в младшем байте %al  
	subl $48, %eax		# преобразовываем код символа цифры в само число

  	incl %esi		# указать на следующий адрес буфера для следующего символа

	jmp kbd_input		#  переходим на ввод следующего символа

print_err_msg:
    Puts "Не цифровая клавиша. Повторите ввод."	# вывод сообщения об ошибке
	jmp show_prompt 	# на ввод следующего символа
	
print_err_buf:
    Puts "Конец места в буфере! Завершение программы." #  вывод сообщения об ошибке
    jmp stop					   # на завершение программы


stop:
    Exit $0
    
.end
